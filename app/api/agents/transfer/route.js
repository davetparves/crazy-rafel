// /app/api/agent/transfer/route.js
import { NextResponse } from 'next/server'
import mongoose from 'mongoose'
import dbConnect from '@/db/connect'
import User from '@/models/user.model'
import Transaction from '@/models/transaction.model'

export async function POST(req) {
  try {
    const body = await req.json()
    const agentEmail = String(body?.agentEmail || '')
      .trim()
      .toLowerCase()
    const userEmail = String(body?.userEmail || '')
      .trim()
      .toLowerCase()
    const amount = Number(body?.amount)

    if (!agentEmail || !userEmail || !Number.isFinite(amount)) {
      return NextResponse.json(
        { success: false, message: 'agentEmail, userEmail ‡¶è‡¶¨‡¶Ç amount ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞' },
        { status: 400 },
      )
    }
    if (amount <= 0) {
      return NextResponse.json(
        { success: false, message: 'Amount ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' },
        { status: 400 },
      )
    }
    if (agentEmail === userEmail) {
      return NextResponse.json(
        { success: false, message: '‡¶è‡¶ï‡¶á ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶ì ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ' },
        { status: 400 },
      )
    }

    await dbConnect()

    // ‡¶´‡ßá‡¶ö ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶∞‡¶æ
    const [agent, user] = await Promise.all([
      User.findOne({ email: agentEmail }).select('_id email role walletBalance').lean(),
      User.findOne({ email: userEmail }).select('_id email walletBalance').lean(),
    ])

    if (!agent) {
      return NextResponse.json({ success: false, message: 'Agent ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' }, { status: 404 })
    }
    if (!user) {
      return NextResponse.json({ success: false, message: 'User ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' }, { status: 404 })
    }

    // ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶∞‡ßã‡¶≤ ‡¶ö‡ßá‡¶ï (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
    // if (agent.role !== 'agent') {
    //   return NextResponse.json({ success: false, message: '‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü agent ‡¶®‡ßü' }, { status: 403 })
    // }

    // ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶®‡¶æ
    if (Number(agent.walletBalance || 0) < amount) {
      return NextResponse.json(
        { success: false, message: '‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ö‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§' },
        { status: 400 },
      )
    }

    // üîê Transaction (atomic)
    const session = await mongoose.startSession()
    try {
      let newAgentBal = Number(agent.walletBalance || 0)
      let newUserBal = Number(user.walletBalance || 0)

      await session.withTransaction(async () => {
        // 1) ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶ü‡¶¨‡ßá (+ ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®)
        const dec = await User.findOneAndUpdate(
          { _id: agent._id, walletBalance: { $gte: amount } },
          { $inc: { walletBalance: -amount } },
          { new: true, session, projection: 'walletBalance' },
        )
        if (!dec) throw new Error('Agent balance insufficient (race)')

        const tAgent = await Transaction.create([{ userId: agent._id, amount: -amount }], {
          session,
        })
        // ‡¶è‡¶ú‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ transactions-‡¶è ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡ßÅ‡¶∂
        await User.updateOne(
          { _id: agent._id },
          { $push: { transactions: { transactionId: tAgent[0]._id, createdAt: new Date() } } },
          { session },
        )
        newAgentBal = Number(dec.walletBalance || 0)

        // 2) ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó (+ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®)
        const inc = await User.findOneAndUpdate(
          { _id: user._id },
          { $inc: { walletBalance: amount } },
          { new: true, session, projection: 'walletBalance' },
        )
        const tUser = await Transaction.create([{ userId: user._id, amount: amount }], { session })
        await User.updateOne(
          { _id: user._id },
          { $push: { transactions: { transactionId: tUser[0]._id, createdAt: new Date() } } },
          { session },
        )
        newUserBal = Number(inc.walletBalance || 0)
      })

      return NextResponse.json(
        {
          success: true,
          message: 'Deposit successful ‚úÖ',
          data: {
            agent: { email: agent.email, walletBalance: newAgentBal },
            user: { email: user.email, walletBalance: newUserBal },
          },
        },
        { status: 200 },
      )
    } finally {
      await session.endSession()
    }
  } catch (err) {
    return NextResponse.json(
      { success: false, message: 'Server error', error: String(err?.message || err) },
      { status: 500 },
    )
  }
}
