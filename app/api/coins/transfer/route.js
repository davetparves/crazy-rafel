// /app/api/coins/transfer/route.js
import { NextResponse } from "next/server";

import mongoose from "mongoose";
import redis from "@/lib/redis";
import dbConnect from "@/db/connect";
import User from "@/models/user.model";
import Transaction from "@/models/transaction.model";
// ‡¶Æ‡¶°‡ßá‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü


const LIMIT = 5;                 // ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü
const CACHE_KEY = "recent_txn_v1";
const TTL_SECONDS = 60;          // ‡ßß ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü

export async function POST(req) {
  try {
    const body = await req.json();
    const email = String(body?.email || "").trim().toLowerCase();
    // ‡¶è‡¶ñ‡¶® ‡¶∏‡¶æ‡¶á‡¶®‡¶∏‡¶π ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ
    const rawAmount = Number(body?.amount);

    // ‚úÖ ‡¶®‡¶®-‡¶ú‡¶ø‡¶∞‡ßã ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® (‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠/‡¶®‡ßá‡¶ó‡ßá‡¶ü‡¶ø‡¶≠ ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶†‡¶ø‡¶ï)
    if (!email || !Number.isFinite(rawAmount) || rawAmount === 0) {
      return NextResponse.json(
        { success: false, message: "‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ì ‡¶®‡¶®-‡¶ú‡¶ø‡¶∞‡ßã ‡¶è‡¶Æ‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¶‡¶ø‡¶®‡•§" },
        { status: 400 }
      );
    }

    await dbConnect();

    // üîé ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï
    const user = await User.findOne({ email }).lean();
    if (!user) {
      return NextResponse.json(
        { success: false, message: "‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßã‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" },
        { status: 404 }
      );
    }

    const isPositive = rawAmount > 0;
    const absAmount = Math.abs(rawAmount);

    const session = await mongoose.startSession();
    try {
      await session.withTransaction(async () => {
        // 1) üéØ Transaction create (type = 'transfer', amount = absolute)
        const [tx] = await Transaction.create(
          [
            {
              userId: user._id,
              type: "transfer",         // ‚úÖ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ü‡¶æ‡¶á‡¶™
              amount: absAmount,        // ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ø‡¶Ç‡ßü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø absolute ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã
              currency: "BDT",
              note: isPositive
                ? `‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ${absAmount} ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`
                : `‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ${absAmount} ‡¶ï‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`,
            },
          ],
          { session }
        );

        // 2) üîÅ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ wallet.main ‡¶á‡¶®‡¶ï‡ßç‡¶∞‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü/‡¶°‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü (‡¶∏‡¶æ‡¶á‡¶®‡¶∏‡¶π)
        await User.updateOne(
          { _id: user._id },
          {
            $inc: { "wallet.main": rawAmount },   // <- ‡¶∏‡¶æ‡¶á‡¶®‡¶∏‡¶π +/-
            $push: {
              transactions: {
                transactionId: tx._id,
                createdAt: tx.createdAt,
              },
            },
          },
          { session }
        );
      });

      return NextResponse.json(
        {
          success: true,
          message: isPositive
            ? "‡¶ï‡ßü‡ßá‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
            : "‡¶ï‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        },
        { status: 201 }
      );
    } finally {
      await session.endSession();
    }
  } catch (err) {
    return NextResponse.json(
      {
        success: false,
        message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§",
        error: String(err?.message || err),
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  try {
    // üëâ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂-‡¶ï‡ßÄ (‡¶∂‡ßÅ‡¶ß‡ßÅ transfer ‡¶ü‡¶æ‡¶á‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    const KEY = `${CACHE_KEY}:transfer`;

    // 1) ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶•‡ßá‡¶ï‡ßá
    if (redis) {
      try {
        const cached = await redis.get(KEY);
        if (cached) {
          const data = JSON.parse(cached);
          return NextResponse.json(
            { success: true, data, cache: "HIT" },
            { status: 200, headers: { "x-cache": "hit" } }
          );
        }
      } catch {
        // redis error ‡¶π‡¶≤‡ßá ‡¶®‡ßÄ‡¶∞‡¶¨‡ßá DB fallback
      }
    }

    // 2) DB ‡¶•‡ßá‡¶ï‡ßá: ‡¶ï‡ßá‡¶¨‡¶≤ type === 'transfer', ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ LIMIT ‡¶ü‡¶æ
    await dbConnect();
    const rows = await Transaction.find({ type: "transfer" })
      .sort({ createdAt: -1 })
      .limit(LIMIT) // LIMIT = 5
      .populate("userId", "email role")
      .lean();

    const data = rows.map((t) => ({
      _id: String(t._id),
      amount: t.amount,            // ‡¶è‡¶ñ‡¶® +/- ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
      type: t.type,                // 'transfer'
      createdAt: t.createdAt,
      user: t.userId
        ? { _id: String(t.userId._id), email: t.userId.email, role: t.userId.role }
        : { _id: null, email: "", role: "" },
    }));

    // 3) ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ (TTL ‡¶∏‡¶π)
    if (redis) {
      try {
        await redis.set(KEY, JSON.stringify(data), "EX", TTL_SECONDS);
      } catch {
        // cache set ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá‡¶ì ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶¨‡ßã
      }
    }

    return NextResponse.json(
      { success: true, data, cache: "MISS" },
      { status: 200, headers: { "x-cache": "miss" } }
    );
  } catch (err) {
    return NextResponse.json(
      {
        success: false,
        message: "Recent transfers fetch ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá",
        error: String(err?.message || err),
      },
      { status: 500 }
    );
  }
}
